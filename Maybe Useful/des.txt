#include <iostream>
#include <string>
#include <vector>
#include <bitset>

using namespace std;

// Define the PC-1 table for 56-bit key generation.
const int PC_1_TABLE[56] = {
    57, 49, 41, 33, 25, 17, 9,
    1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27,
    19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7, 62, 54, 46, 38, 30, 22,
    14, 6, 61, 53, 45, 37, 29,
    21, 13, 5, 28, 20, 12, 4
};

// Shifts for each round as per the image provided.
const int SHIFT_SCHEDULE[16] = {
    1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1
};

// Define the PC-2 table for 48-bit subkey generation.
const int PC_2_TABLE[48] = {
    14, 17, 11, 24, 1, 5,
    3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8,
    16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32
};

const int IP_TABLE[64] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};

const int E_BIT_SELECTION_TABLE[48] = {
    32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9,
    8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17,
    16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25,
    24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1
};
// S-boxes
const int S_BOXES[8][4][16] = {
    // S1
    {
        14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
        0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
        4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
        15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13
    },
    // S2
    {
        15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
        3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
        0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
        13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9
    },
    // S3
    {
        10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
        13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
        13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
        1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12
    },
    // S4
    {
        7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
        13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
        10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
        3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14
    },
    // S5
    {
        2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
        14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
        4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
        11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3
    },
    // S6
    {
        12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
        10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
        9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
        4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13
    },
    // S7
    {
        4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
        13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
        1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
        6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12
    },
    // S8
    {
        13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
        1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
        7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
        2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11
    }
    
};

// Permutation Table
const int PERMUTATION_TABLE[32] = {
    16, 7, 20, 21, 29, 12, 28, 17,
    1, 15, 23, 26, 5, 18, 31, 10,
    2, 8, 24, 14, 32, 27, 3, 9,
    19, 13, 30, 6, 22, 11, 4, 25
};

// Final Permutation Table
const int FINAL_PERMUTATION_TABLE[64] = {
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
};

// Function to perform the initial permutation
string initial_permutation(const string& input) {
    string permuted;
    for (int i = 0; i < 64; ++i) {
        permuted += input[IP_TABLE[i] - 1];
    }
    return permuted;
}

// Function to perform the PC-1 permutation on the key
pair<string, string> PC_1(const string& key) {
    string permutedKey;
    for (int i = 0; i < 56; ++i) {
        permutedKey += key[PC_1_TABLE[i] - 1];
    }
    string C = permutedKey.substr(0, 28);
    string D = permutedKey.substr(28, 28);
    return make_pair(C, D);
}

// Function to perform a left circular shift on a bit string
string leftCircularShift(const string& half, int shifts) {
    string shifted = half.substr(shifts) + half.substr(0, shifts);
    return shifted;
}

// Function to perform the PC-2 permutation to generate a 48-bit key
string PC_2(const string& C, const string& D) {
    string combined = C + D;
    string subkey;
    for (int i = 0; i < 48; ++i) {
        subkey += combined[PC_2_TABLE[i] - 1];
    }
    return subkey;
}

vector<string> performRounds(pair<string, string>& halves) {
    vector<string> roundKeys(16);
    cout << "Initial halves after PC-1:" << endl;
    cout << "28 bit C: " << halves.first << endl;
    cout << "28 bit D: " << halves.second << endl;

    for (int Round = 0; Round < 16; ++Round) {
        halves.first = leftCircularShift(halves.first, SHIFT_SCHEDULE[Round]);
        halves.second = leftCircularShift(halves.second, SHIFT_SCHEDULE[Round]);

        cout << "Round " << (Round + 1) << " shifted values:" << endl;
        cout << "C" << (Round + 1) << ": " << halves.first << endl;
        cout << "D" << (Round + 1) << ": " << halves.second << endl;

        roundKeys[Round] = PC_2(halves.first, halves.second);
        cout << "Key" << Round + 1 << ": " << roundKeys[Round] << endl << endl;
    }
    return roundKeys;
}

// Function to perform XOR operation between two binary strings
string XOR(const string& a, const string& b) {
    string result;
    for (size_t i = 0; i < a.size(); ++i) {
        result += to_string((a[i] - '0') ^ (b[i] - '0'));
    }
    return result;
}

string expansionPermutation(const string& input) {
    string expanded;
    for (int i = 0; i < 48; ++i) {
        expanded += input[E_BIT_SELECTION_TABLE[i] - 1];
    }
    return expanded;
}

// Function to perform the S-Box Substitution
string sBoxSubstitution(const string& input) {
    string output;
    for (int i = 0; i < 8; ++i) {
        int row = 2 * (input[6 * i] - '0') + (input[6 * i + 5] - '0');
        int col = 8 * (input[6 * i + 1] - '0') + 4 * (input[6 * i + 2] - '0') +
                  2 * (input[6 * i + 3] - '0') + (input[6 * i + 4] - '0');
        int val = S_BOXES[i][row][col];
        output += bitset<4>(val).to_string();
    }
    return output;
}

// Function to perform the Straight Permutation
string straightPermutation(const string& input) {
    string permuted;
    for (int i = 0; i < 32; ++i) {
        permuted += input[PERMUTATION_TABLE[i] - 1];
    }
    return permuted;
}

// Function to perform a DES Round
string DESRound(const string& L, const string& R, const string& key) {
    string expandedR = expansionPermutation(R);
    cout << "Expanded R: " << expandedR << endl;

    string xored = XOR(expandedR, key);
    cout << "XOR with key: " << xored << endl;

    string sBoxOutput = sBoxSubstitution(xored);
    cout << "S-Box Output: " << sBoxOutput << endl;

    string permuted = straightPermutation(sBoxOutput);
    cout << "Permuted: " << permuted << endl;

    return XOR(L, permuted);
}

int main() {
    string key = "0011010000101101101101011010100000011101110110111001000000000100";
    cout << "64 bit Key: " << key << endl;

    pair<string, string> halves = PC_1(key);
    cout << "After PC-1 56 bit key: " << halves.first + halves.second << endl;

    vector<string> roundKeys = performRounds(halves);

    string pt = "0100000101101110011100110110000101110010011110011000000010000000";
    string permuted_pt = initial_permutation(pt);
    cout << "After initial permutation: " << endl;

    string L0 = permuted_pt.substr(0, 32);
    string R0 = permuted_pt.substr(32, 32);

    cout << "\nL0: " << L0 << endl;
    cout << "R0: " << R0 << endl;

    string L = L0, R = R0;
    for (int i = 0; i < 16; ++i) {
        cout << "Round " << i + 1 << endl;
        string newL = R;
        R = DESRound(L, R, roundKeys[i]);
        L = newL;
        cout << "After XOR and in Round " << i + 1 << ": L = " << L << ", R = " << R << endl << endl;
    }

    return 0;
}
